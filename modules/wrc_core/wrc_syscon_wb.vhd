---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for WR Core System Controller
---------------------------------------------------------------------------------------
-- File           : wrc_syscon_wb.vhd
-- Author         : auto-generated by wbgen2 from wrc_syscon_wb.wb
-- Created        : Thu Aug  2 11:41:11 2012
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wrc_syscon_wb.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.sysc_wbgen2_pkg.all;


entity wrc_syscon_wb is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(2 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    regs_i                                   : in     t_sysc_in_registers;
    regs_o                                   : out    t_sysc_out_registers
  );
end wrc_syscon_wb;

architecture syn of wrc_syscon_wb is

signal sysc_rstr_rst_int                        : std_logic      ;
signal sysc_gpsr_led_stat_dly0                  : std_logic      ;
signal sysc_gpsr_led_stat_int                   : std_logic      ;
signal sysc_gpsr_led_link_dly0                  : std_logic      ;
signal sysc_gpsr_led_link_int                   : std_logic      ;
signal sysc_gpsr_net_rst_dly0                   : std_logic      ;
signal sysc_gpsr_net_rst_int                    : std_logic      ;
signal sysc_gpcr_led_stat_dly0                  : std_logic      ;
signal sysc_gpcr_led_stat_int                   : std_logic      ;
signal sysc_gpcr_led_link_dly0                  : std_logic      ;
signal sysc_gpcr_led_link_int                   : std_logic      ;
signal sysc_gpcr_fmc_scl_dly0                   : std_logic      ;
signal sysc_gpcr_fmc_scl_int                    : std_logic      ;
signal sysc_gpcr_fmc_sda_dly0                   : std_logic      ;
signal sysc_gpcr_fmc_sda_int                    : std_logic      ;
signal sysc_gpcr_sfp_scl_dly0                   : std_logic      ;
signal sysc_gpcr_sfp_scl_int                    : std_logic      ;
signal sysc_gpcr_sfp_sda_dly0                   : std_logic      ;
signal sysc_gpcr_sfp_sda_int                    : std_logic      ;
signal sysc_tcr_enable_int                      : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(2 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      regs_o.rstr_trig_wr_o <= '0';
      sysc_rstr_rst_int <= '0';
      sysc_gpsr_led_stat_int <= '0';
      sysc_gpsr_led_link_int <= '0';
      regs_o.gpsr_fmc_scl_load_o <= '0';
      regs_o.gpsr_fmc_sda_load_o <= '0';
      sysc_gpsr_net_rst_int <= '0';
      regs_o.gpsr_sfp_scl_load_o <= '0';
      regs_o.gpsr_sfp_sda_load_o <= '0';
      sysc_gpcr_led_stat_int <= '0';
      sysc_gpcr_led_link_int <= '0';
      sysc_gpcr_fmc_scl_int <= '0';
      sysc_gpcr_fmc_sda_int <= '0';
      sysc_gpcr_sfp_scl_int <= '0';
      sysc_gpcr_sfp_sda_int <= '0';
      sysc_tcr_enable_int <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          regs_o.rstr_trig_wr_o <= '0';
          sysc_gpsr_led_stat_int <= '0';
          sysc_gpsr_led_link_int <= '0';
          regs_o.gpsr_fmc_scl_load_o <= '0';
          regs_o.gpsr_fmc_sda_load_o <= '0';
          sysc_gpsr_net_rst_int <= '0';
          regs_o.gpsr_sfp_scl_load_o <= '0';
          regs_o.gpsr_sfp_sda_load_o <= '0';
          sysc_gpcr_led_stat_int <= '0';
          sysc_gpcr_led_link_int <= '0';
          sysc_gpcr_fmc_scl_int <= '0';
          sysc_gpcr_fmc_sda_int <= '0';
          sysc_gpcr_sfp_scl_int <= '0';
          sysc_gpcr_sfp_sda_int <= '0';
          ack_in_progress <= '0';
        else
          regs_o.rstr_trig_wr_o <= '0';
          regs_o.gpsr_fmc_scl_load_o <= '0';
          regs_o.gpsr_fmc_sda_load_o <= '0';
          regs_o.gpsr_sfp_scl_load_o <= '0';
          regs_o.gpsr_sfp_sda_load_o <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(2 downto 0) is
          when "000" => 
            if (wb_we_i = '1') then
              regs_o.rstr_trig_wr_o <= '1';
              sysc_rstr_rst_int <= wrdata_reg(28);
            end if;
            rddata_reg(28) <= sysc_rstr_rst_int;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "001" => 
            if (wb_we_i = '1') then
              sysc_gpsr_led_stat_int <= wrdata_reg(0);
              sysc_gpsr_led_link_int <= wrdata_reg(1);
              regs_o.gpsr_fmc_scl_load_o <= '1';
              regs_o.gpsr_fmc_sda_load_o <= '1';
              sysc_gpsr_net_rst_int <= wrdata_reg(4);
              regs_o.gpsr_sfp_scl_load_o <= '1';
              regs_o.gpsr_sfp_sda_load_o <= '1';
            end if;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= regs_i.gpsr_fmc_scl_i;
            rddata_reg(3) <= regs_i.gpsr_fmc_sda_i;
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= regs_i.gpsr_btn1_i;
            rddata_reg(6) <= regs_i.gpsr_btn2_i;
            rddata_reg(7) <= regs_i.gpsr_sfp_det_i;
            rddata_reg(8) <= regs_i.gpsr_sfp_scl_i;
            rddata_reg(9) <= regs_i.gpsr_sfp_sda_i;
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(2) <= '1';
            ack_in_progress <= '1';
          when "010" => 
            if (wb_we_i = '1') then
              sysc_gpcr_led_stat_int <= wrdata_reg(0);
              sysc_gpcr_led_link_int <= wrdata_reg(1);
              sysc_gpcr_fmc_scl_int <= wrdata_reg(2);
              sysc_gpcr_fmc_sda_int <= wrdata_reg(3);
              sysc_gpcr_sfp_scl_int <= wrdata_reg(8);
              sysc_gpcr_sfp_sda_int <= wrdata_reg(9);
            end if;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(2) <= '1';
            ack_in_progress <= '1';
          when "011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(3 downto 0) <= regs_i.hwfr_memsize_i;
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100" => 
            if (wb_we_i = '1') then
              sysc_tcr_enable_int <= wrdata_reg(31);
            end if;
            rddata_reg(11 downto 0) <= regs_i.tcr_tdiv_i;
            rddata_reg(31) <= sysc_tcr_enable_int;
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.tvr_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- Reset trigger
-- pass-through field: Reset trigger in register: Syscon reset register
  regs_o.rstr_trig_o <= wrdata_reg(27 downto 0);
-- Reset line state value
  regs_o.rstr_rst_o <= sysc_rstr_rst_int;
-- Status LED
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      sysc_gpsr_led_stat_dly0 <= '0';
      regs_o.gpsr_led_stat_o <= '0';
    elsif rising_edge(clk_sys_i) then
      sysc_gpsr_led_stat_dly0 <= sysc_gpsr_led_stat_int;
      regs_o.gpsr_led_stat_o <= sysc_gpsr_led_stat_int and (not sysc_gpsr_led_stat_dly0);
    end if;
  end process;
  
  
-- Link LED
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      sysc_gpsr_led_link_dly0 <= '0';
      regs_o.gpsr_led_link_o <= '0';
    elsif rising_edge(clk_sys_i) then
      sysc_gpsr_led_link_dly0 <= sysc_gpsr_led_link_int;
      regs_o.gpsr_led_link_o <= sysc_gpsr_led_link_int and (not sysc_gpsr_led_link_dly0);
    end if;
  end process;
  
  
-- FMC I2C bitbanged SCL
  regs_o.gpsr_fmc_scl_o <= wrdata_reg(2);
-- FMC I2C bitbanged SDA
  regs_o.gpsr_fmc_sda_o <= wrdata_reg(3);
-- Network AP reset
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      sysc_gpsr_net_rst_dly0 <= '0';
      regs_o.gpsr_net_rst_o <= '0';
    elsif rising_edge(clk_sys_i) then
      sysc_gpsr_net_rst_dly0 <= sysc_gpsr_net_rst_int;
      regs_o.gpsr_net_rst_o <= sysc_gpsr_net_rst_int and (not sysc_gpsr_net_rst_dly0);
    end if;
  end process;
  
  
-- SPEC Pushbutton 1 state
-- SPEC Pushbutton 2 state
-- SFP detect (MOD_DEF0 signal)
-- SFP I2C bitbanged SCL
  regs_o.gpsr_sfp_scl_o <= wrdata_reg(8);
-- SFP I2C bitbanged SDA
  regs_o.gpsr_sfp_sda_o <= wrdata_reg(9);
-- Status LED
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      sysc_gpcr_led_stat_dly0 <= '0';
      regs_o.gpcr_led_stat_o <= '0';
    elsif rising_edge(clk_sys_i) then
      sysc_gpcr_led_stat_dly0 <= sysc_gpcr_led_stat_int;
      regs_o.gpcr_led_stat_o <= sysc_gpcr_led_stat_int and (not sysc_gpcr_led_stat_dly0);
    end if;
  end process;
  
  
-- Link LED
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      sysc_gpcr_led_link_dly0 <= '0';
      regs_o.gpcr_led_link_o <= '0';
    elsif rising_edge(clk_sys_i) then
      sysc_gpcr_led_link_dly0 <= sysc_gpcr_led_link_int;
      regs_o.gpcr_led_link_o <= sysc_gpcr_led_link_int and (not sysc_gpcr_led_link_dly0);
    end if;
  end process;
  
  
-- FMC I2C bitbanged SCL
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      sysc_gpcr_fmc_scl_dly0 <= '0';
      regs_o.gpcr_fmc_scl_o <= '0';
    elsif rising_edge(clk_sys_i) then
      sysc_gpcr_fmc_scl_dly0 <= sysc_gpcr_fmc_scl_int;
      regs_o.gpcr_fmc_scl_o <= sysc_gpcr_fmc_scl_int and (not sysc_gpcr_fmc_scl_dly0);
    end if;
  end process;
  
  
-- FMC I2C bitbanged SDA
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      sysc_gpcr_fmc_sda_dly0 <= '0';
      regs_o.gpcr_fmc_sda_o <= '0';
    elsif rising_edge(clk_sys_i) then
      sysc_gpcr_fmc_sda_dly0 <= sysc_gpcr_fmc_sda_int;
      regs_o.gpcr_fmc_sda_o <= sysc_gpcr_fmc_sda_int and (not sysc_gpcr_fmc_sda_dly0);
    end if;
  end process;
  
  
-- SFP I2C bitbanged SCL
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      sysc_gpcr_sfp_scl_dly0 <= '0';
      regs_o.gpcr_sfp_scl_o <= '0';
    elsif rising_edge(clk_sys_i) then
      sysc_gpcr_sfp_scl_dly0 <= sysc_gpcr_sfp_scl_int;
      regs_o.gpcr_sfp_scl_o <= sysc_gpcr_sfp_scl_int and (not sysc_gpcr_sfp_scl_dly0);
    end if;
  end process;
  
  
-- FMC I2C bitbanged SDA
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      sysc_gpcr_sfp_sda_dly0 <= '0';
      regs_o.gpcr_sfp_sda_o <= '0';
    elsif rising_edge(clk_sys_i) then
      sysc_gpcr_sfp_sda_dly0 <= sysc_gpcr_sfp_sda_int;
      regs_o.gpcr_sfp_sda_o <= sysc_gpcr_sfp_sda_int and (not sysc_gpcr_sfp_sda_dly0);
    end if;
  end process;
  
  
-- Memory size
-- Timer Divider
-- Timer Enable
  regs_o.tcr_enable_o <= sysc_tcr_enable_int;
-- Timer Counter Value
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
